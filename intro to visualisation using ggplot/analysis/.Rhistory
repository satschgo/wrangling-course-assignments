# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
dir.create("plots")
library(readr)
library(ggplot2)
# install.packages("datasauRus")
library(datasauRus)
library(readr)
library(ggplot2)
# install.packages("datasauRus")
library(datasauRus)
install.packages("datasauRus")
# M and SD
datasaurus_dozen |>
group_by(dataset) |>
summarize(mean_x = mean(x),
sd_x = sd(x),
mean_y = mean(y),
sd_y = sd(y)) |>
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable(align = 'r')|>
kable_classic(full_width = FALSE)
library(readr)
library(ggplot2)
# install.packages("datasauRus")
library(datasauRus)
library(scales)
library(dplyr)
library(tidyr)
library(plotrix)
install.packages("plotrix")
library(plotrix)
library(readr)
library(ggplot2)
# install.packages("datasauRus")
library(datasauRus)
library(scales)
library(dplyr)
library(tidyr)
library(plotrix)
#devtools::install_github("matthewbjane/ThemePark")
library(ThemePark)
install.packages("ThemePark")
install.packages("ThemePark")
install.packages("ThemePark")
install.packages("ThemePark")
library(readr)
library(ggplot2)
# install.packages("datasauRus")
library(datasauRus)
library(scales)
library(dplyr)
library(tidyr)
library(plotrix)
#devtools::install_github("matthewbjane/ThemePark")
library(ThemePark)
install.packages("ThemePark")
library(readr)
library(ggplot2)
install.packages("datasauRus")
library(datasauRus)
library(scales)
library(dplyr)
library(tidyr)
library(plotrix)
devtools::install_github("matthewbjane/ThemePark")
library(readr)
library(ggplot2)
install.packages("datasauRus")
library(datasauRus)
library(scales)
library(dplyr)
library(tidyr)
library(plotrix)
install.packages("devtools")
devtools::install_github("matthewbjane/ThemePark")
library(ThemePark)
library(patchwork)
install.packages("patchwork")
library(patchwork)
library(readr)
library(ggplot2)
install.packages("datasauRus")
library(datasauRus)
library(scales)
library(dplyr)
library(tidyr)
library(plotrix)
install.packages("devtools")
devtools::install_github("matthewbjane/ThemePark")
library(ThemePark)
library(patchwork)
library(janitor)
library(knitr)
library(kableExtra)
# M and SD
datasaurus_dozen |>
group_by(dataset) |>
summarize(mean_x = mean(x),
sd_x = sd(x),
mean_y = mean(y),
sd_y = sd(y)) |>
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable(align = 'r')|>
kable_classic(full_width = FALSE)
# correlation
datasaurus_dozen |>
group_by(dataset) |>
summarize(correlation = cor(x, y)) |>
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable(align = 'r') |>
kable_classic(full_width = FALSE)
ggplot(datasaurus_dozen, aes(x = x, y = y)) +
geom_point() +
facet_wrap(~dataset) +
theme_minimal()
# get data
data_processed <- read_csv("../data/processed/data_processed.csv")
data_after_exclusions <- data_processed |>
filter(exclude_amp == "include" &
n_items == 3 &
gender %in% c("male", "female"))
#instead of self report, amp score distribution
ggplot(data = data_after_exclusions,
aes(x = mean_AMP_scores)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 1, boundary = 0.5) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0.5, 7.5)) +
theme_minimal()
# get data
data_processed <- read_csv("../data/processed/data_processed.csv")
data_after_exclusions <- data_processed |>
filter(exclude_amp == "include" &
n_items == 3 &
gender %in% c("male", "female"))
# data and aesthetics calls
plot_1 <-
ggplot(data = data_after_exclusions,
aes(x = mean_self_report,
y = amp_score,
color = gender,
shape = gender)) +
# draw lines manually
geom_vline(xintercept = 4, linetype = "dotted") +
geom_hline(yintercept = 0.5, linetype = "dotted") +
# draw geoms using the aesthetics (x, y, color and shape)
## points
geom_point() +
## fit curves, in this case a linear model
geom_smooth(method = "lm") +
# adjust axis labels and ranges
scale_x_continuous(name = "Explicit evaluation\n(Self-report)",
breaks = scales::breaks_pretty(n = 7)) +
scale_y_continuous(name = "Implicit evaluation\n(AMP)") +
# apply a theme
theme_linedraw() +
# adjust elements of the theme
labs(title = "Scatter plot with linear regression lines",
color = "Gender",
shape = "Gender") +
# adjust the colors
scale_color_manual(values = c("female" = "#FF69B4",
"male" = "#6495ED"),
labels = c("female" = "Female",
"male" = "Male")) +
# adjust the shapes
scale_shape_manual(values = c("female" = 16,
"male" = 17),
labels = c("female" = "Female",
"male" = "Male")) +
# display specific x and y coordinates without dropping data points (nb using `limits` drops data points, coord_cartesian does not)
coord_cartesian(xlim = c(1, 7),
ylim = c(0, 1))
# display plot below chunk
plot_1
# save plot to disk as png
ggsave(plot = plot_1,
filename = "plots/plot_1.pdf",
width = 6,
height = 5)
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
geom_histogram()
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 1, boundary = 0.5) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0.5, 7.5)) +
theme_minimal()
#instead of self report, amp score distribution
ggplot(data = data_after_exclusions,
aes(x = AMP_scores)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 1, boundary = 0.5) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0.5, 7.5)) +
theme_minimal()
#instead of self report, amp score distribution
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 1, boundary = ) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = ),
limits = c(0.5, 7.5)) +
theme_minimal()
#instead of self report, amp score distribution
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 1, boundary = 2) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = ),
limits = c(0.5, 7.5)) +
theme_minimal()
#instead of self report, amp score distribution
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 1, boundary = 0.5) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = ),
limits = c(0.5, 7.5)) +
theme_minimal()
#instead of self report, amp score distribution
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 0.1, boundary = 0.5) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = ),
limits = c(0.5, 7.5)) +
theme_minimal()
#instead of self report, amp score distribution
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 0.1) +
# labeling of the axis points
scale_x_continuous(breaks = seq(0,1, .10),
name = "AMP score"
scale_y_continuous(breaks = seq(0,40, 5),
#instead of self report, amp score distribution
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 0.1) +
# labeling of the axis points
scale_x_continuous(breaks = seq(0,1, .10),
name = "amp_score"
scale_y_continuous(breaks = seq(0,40, 5),
#instead of self report, amp score distribution
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 0.1) +
# labeling of the axis points
scale_x_continuous(breaks = seq(0,1, .10)
name = "amp_score"
#instead of self report, amp score distribution
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 0.1) +
# labeling of the axis points
scale_x_continuous(breaks = seq(0,1, 0.10),
name = "amp_score"
scale_y_continuous(breaks = seq(0,40, 5).
#instead of self report, amp score distribution
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 0.1) +
# labeling of the axis points
scale_x_continuous(breaks = seq(0, 1, 0.10),
name = "amp_score"
scale_y_continuous(breaks = seq(0, 40, 5).
#instead of self report, amp score distribution
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 0.1) +
# labeling of the axis points
scale_x_continuous(breaks = seq(0 , 1 , 0.10),
name = "amp_score"
scale_y_continuous(breaks = seq(0 , 40 , 5).
#instead of self report, amp score distribution
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 0.1) +
# labeling of the axis points
scale_x_continuous(breaks = seq(0 , 1 , 0.10),
name = "AMP score"
scale_y_continuous(breaks = seq(0 , 40 , 5).
#instead of self report, amp score distribution
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 0.1) +
# labeling of the axis points
scale_x_continuous(breaks = seq(0 , 1 , 0.10),
name = "AMP score")
scale_y_continuous(breaks = seq(0 , 40 , 5).
#instead of self report, amp score distribution
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_histogram(binwidth = 0.1) +
# labeling of the axis points
scale_x_continuous(breaks = seq(0 , 1 , 0.10),
name = "AMP score")
scale_y_continuous(breaks = seq(0 , 40 , 5),
name = "Frequency")
theme_minimal()
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
# more intelligent choices for the binwidth and boundary
geom_density(adjust = 1, # the degree of smoothing can be adjusted here
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(1, 7)) +
theme_minimal()
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
# more intelligent choices for the binwidth and boundary
geom_density(adjust = 0.1, # the degree of smoothing can be adjusted here
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(1, 7)) +
theme_minimal()
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
# more intelligent choices for the binwidth and boundary
geom_density(adjust = 1, # the degree of smoothing can be adjusted here
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(1, 7)) +
theme_minimal()
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_density(adjust = 1, # the degree of smoothing can be adjusted here
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(1, 7)) +
theme_minimal()
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_density(adjust = 0.10, # the degree of smoothing can be adjusted here
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(1, 7)) +
theme_minimal()
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_density(adjust = 0.10, # the degree of smoothing can be adjusted here
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0.10, 0.20)) +
theme_minimal()
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_density(adjust = 0.1, # the degree of smoothing can be adjusted here
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0.10, 0.20)) +
theme_minimal()
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
# more intelligent choices for the binwidth and boundary
geom_density(adjust = 0.1, # the degree of smoothing can be adjusted here
color = "#FF69B4",
fill = "darkblue",
alpha = 0.5) +
# labeling of the axis points
scale_x_continuous(breaks = scales::breaks_pretty(n = 7),
limits = c(0.10, 0.20)) +
theme_minimal()
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_density(adjust = 1,
alpha = 0.5) +
# labeling of the axis points
scale_x_continuous(breaks = seq(0 , 1 , 0.10),
name = "AMP score")
scale_y_continuous(breaks = seq(0 , 40 , 5),
name = "Frequency")
theme_minimal()
# create the summary values to be plotted
summary_amp <- data_after_exclusions %>%
group_by(gender) %>%
summarize(amp_mean = mean(amp_score),
amp_se = plotrix::std.error(amp_score))
# plot these values
ggplot(data = summary_amp,
aes(x = gender,
y = amp_mean)) +
geom_col() +
# geom_bar(stat = "identity") + # NB geom_col is equivalent to geom_bar when stat == "identity
geom_linerange(aes(ymin = amp_mean - amp_se,
ymax = amp_mean + amp_se))
ggplot(data = summary_amp,
aes(x = gender,
y = amp_mean)) +
geom_col(fill = "#0b6623", # note that you can specify specific colors using hex codes or names
color = "black",
width = 0.6) +
geom_errorbar(aes(ymin = amp_mean - amp_se,
ymax = amp_mean + amp_se),
width = 0.1,
color = "black") +
labs(title = "Bar Plot of with Standard Errors",
x = "Gender",
y = "Mean AMP score") +
theme_linedraw()
